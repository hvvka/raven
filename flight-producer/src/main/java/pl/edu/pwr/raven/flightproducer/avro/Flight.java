/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package pl.edu.pwr.raven.flightproducer.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

/**
 * Avro Schema for Flight
 */
@org.apache.avro.specific.AvroGenerated
public class Flight extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Flight\",\"namespace\":\"pl.edu.pwr.raven.flightproducer.avro\",\"doc\":\"Avro Schema for Flight\",\"fields\":[{\"name\":\"flightSymbol\",\"type\":\"string\",\"doc\":\"Symbol of flight\"},{\"name\":\"airline\",\"type\":\"string\",\"doc\":\"Name of airline\"},{\"name\":\"flightType\",\"type\":{\"type\":\"enum\",\"name\":\"FlightType\",\"doc\":\"Type of flight\",\"symbols\":[\"International\",\"Regional\",\"Domestic\"]}},{\"name\":\"scheduledDeparture\",\"type\":\"string\",\"doc\":\"Date and time for a scheduled flight departure\"},{\"name\":\"departure\",\"type\":\"string\",\"doc\":\"Date and time for a flight departure\"},{\"name\":\"scheduledArrival\",\"type\":\"string\",\"doc\":\"Date and time for a scheduled flight arrival\"},{\"name\":\"arrival\",\"type\":\"string\",\"doc\":\"Date and time for a flight arrival\"},{\"name\":\"flightStatus\",\"type\":{\"type\":\"enum\",\"name\":\"FlightStatus\",\"doc\":\"Indicator whether the flight was cancelled or completed\",\"symbols\":[\"Confirmed\",\"Cancelled\"]}},{\"name\":\"justification\",\"type\":\"string\",\"doc\":\"Justification code\"},{\"name\":\"airportFrom\",\"type\":\"string\",\"doc\":\"Airport of departure\"},{\"name\":\"airportTo\",\"type\":\"string\",\"doc\":\"Airport of arrival\"},{\"name\":\"longitudeTo\",\"type\":\"double\",\"doc\":\"Longitude coordinate of destination point\"},{\"name\":\"latitudeTo\",\"type\":\"double\",\"doc\":\"Latitude coordinate of destination point\"},{\"name\":\"longitudeFrom\",\"type\":\"double\",\"doc\":\"Longitude coordinate of origin point\"},{\"name\":\"latitudeFrom\",\"type\":\"double\",\"doc\":\"Latitude coordinate of origin point\"},{\"name\":\"departureDelay\",\"type\":\"int\",\"doc\":\"Departure delay in minutes\"},{\"name\":\"arrivalDelay\",\"type\":\"int\",\"doc\":\"Arrival delay in minutes\"},{\"name\":\"distanceInMeters\",\"type\":\"double\",\"doc\":\"Distance travelled by an airplane in meters\"},{\"name\":\"flightNumber\",\"type\":\"int\",\"doc\":\"Flight number (second part of flight symbol)\"},{\"name\":\"airlineCode\",\"type\":\"string\",\"doc\":\"Airline code (first part of flight symbol)\"}]}");
    private static final long serialVersionUID = -6827532900245561488L;
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<Flight> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<Flight> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Flight>
            WRITER$ = (org.apache.avro.io.DatumWriter<Flight>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Flight>
            READER$ = (org.apache.avro.io.DatumReader<Flight>) MODEL$.createDatumReader(SCHEMA$);
    /**
     * Symbol of flight
     */
    private java.lang.CharSequence flightSymbol;
    /**
     * Name of airline
     */
    private java.lang.CharSequence airline;
    private pl.edu.pwr.raven.flightproducer.avro.FlightType flightType;
    /**
     * Date and time for a scheduled flight departure
     */
    private java.lang.CharSequence scheduledDeparture;
    /**
     * Date and time for a flight departure
     */
    private java.lang.CharSequence departure;
    /**
     * Date and time for a scheduled flight arrival
     */
    private java.lang.CharSequence scheduledArrival;
    /**
     * Date and time for a flight arrival
     */
    private java.lang.CharSequence arrival;
    private pl.edu.pwr.raven.flightproducer.avro.FlightStatus flightStatus;
    /**
     * Justification code
     */
    private java.lang.CharSequence justification;
    /**
     * Airport of departure
     */
    private java.lang.CharSequence airportFrom;
    /**
     * Airport of arrival
     */
    private java.lang.CharSequence airportTo;
    /**
     * Longitude coordinate of destination point
     */
    private double longitudeTo;
    /**
     * Latitude coordinate of destination point
     */
    private double latitudeTo;
    /**
     * Longitude coordinate of origin point
     */
    private double longitudeFrom;
    /**
     * Latitude coordinate of origin point
     */
    private double latitudeFrom;
    /**
     * Departure delay in minutes
     */
    private int departureDelay;
    /**
     * Arrival delay in minutes
     */
    private int arrivalDelay;
    /**
     * Distance travelled by an airplane in meters
     */
    private double distanceInMeters;
    /**
     * Flight number (second part of flight symbol)
     */
    private int flightNumber;
    /**
     * Airline code (first part of flight symbol)
     */
    private java.lang.CharSequence airlineCode;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Flight() {
    }

    /**
     * All-args constructor.
     *
     * @param flightSymbol       Symbol of flight
     * @param airline            Name of airline
     * @param flightType         The new value for flightType
     * @param scheduledDeparture Date and time for a scheduled flight departure
     * @param departure          Date and time for a flight departure
     * @param scheduledArrival   Date and time for a scheduled flight arrival
     * @param arrival            Date and time for a flight arrival
     * @param flightStatus       The new value for flightStatus
     * @param justification      Justification code
     * @param airportFrom        Airport of departure
     * @param airportTo          Airport of arrival
     * @param longitudeTo        Longitude coordinate of destination point
     * @param latitudeTo         Latitude coordinate of destination point
     * @param longitudeFrom      Longitude coordinate of origin point
     * @param latitudeFrom       Latitude coordinate of origin point
     * @param departureDelay     Departure delay in minutes
     * @param arrivalDelay       Arrival delay in minutes
     * @param distanceInMeters   Distance travelled by an airplane in meters
     * @param flightNumber       Flight number (second part of flight symbol)
     * @param airlineCode        Airline code (first part of flight symbol)
     */
    public Flight(java.lang.CharSequence flightSymbol, java.lang.CharSequence airline, pl.edu.pwr.raven.flightproducer.avro.FlightType flightType, java.lang.CharSequence scheduledDeparture, java.lang.CharSequence departure, java.lang.CharSequence scheduledArrival, java.lang.CharSequence arrival, pl.edu.pwr.raven.flightproducer.avro.FlightStatus flightStatus, java.lang.CharSequence justification, java.lang.CharSequence airportFrom, java.lang.CharSequence airportTo, java.lang.Double longitudeTo, java.lang.Double latitudeTo, java.lang.Double longitudeFrom, java.lang.Double latitudeFrom, java.lang.Integer departureDelay, java.lang.Integer arrivalDelay, java.lang.Double distanceInMeters, java.lang.Integer flightNumber, java.lang.CharSequence airlineCode) {
        this.flightSymbol = flightSymbol;
        this.airline = airline;
        this.flightType = flightType;
        this.scheduledDeparture = scheduledDeparture;
        this.departure = departure;
        this.scheduledArrival = scheduledArrival;
        this.arrival = arrival;
        this.flightStatus = flightStatus;
        this.justification = justification;
        this.airportFrom = airportFrom;
        this.airportTo = airportTo;
        this.longitudeTo = longitudeTo;
        this.latitudeTo = latitudeTo;
        this.longitudeFrom = longitudeFrom;
        this.latitudeFrom = latitudeFrom;
        this.departureDelay = departureDelay;
        this.arrivalDelay = arrivalDelay;
        this.distanceInMeters = distanceInMeters;
        this.flightNumber = flightNumber;
        this.airlineCode = airlineCode;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Flight> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Flight> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Flight> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a Flight from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Flight instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Flight fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new Flight RecordBuilder.
     *
     * @return A new Flight RecordBuilder
     */
    public static pl.edu.pwr.raven.flightproducer.avro.Flight.Builder newBuilder() {
        return new pl.edu.pwr.raven.flightproducer.avro.Flight.Builder();
    }

    /**
     * Creates a new Flight RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new Flight RecordBuilder
     */
    public static pl.edu.pwr.raven.flightproducer.avro.Flight.Builder newBuilder(pl.edu.pwr.raven.flightproducer.avro.Flight.Builder other) {
        if (other == null) {
            return new pl.edu.pwr.raven.flightproducer.avro.Flight.Builder();
        } else {
            return new pl.edu.pwr.raven.flightproducer.avro.Flight.Builder(other);
        }
    }

    /**
     * Creates a new Flight RecordBuilder by copying an existing Flight instance.
     *
     * @param other The existing instance to copy.
     * @return A new Flight RecordBuilder
     */
    public static pl.edu.pwr.raven.flightproducer.avro.Flight.Builder newBuilder(pl.edu.pwr.raven.flightproducer.avro.Flight other) {
        if (other == null) {
            return new pl.edu.pwr.raven.flightproducer.avro.Flight.Builder();
        } else {
            return new pl.edu.pwr.raven.flightproducer.avro.Flight.Builder(other);
        }
    }

    /**
     * Serializes this Flight to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return flightSymbol;
            case 1:
                return airline;
            case 2:
                return flightType;
            case 3:
                return scheduledDeparture;
            case 4:
                return departure;
            case 5:
                return scheduledArrival;
            case 6:
                return arrival;
            case 7:
                return flightStatus;
            case 8:
                return justification;
            case 9:
                return airportFrom;
            case 10:
                return airportTo;
            case 11:
                return longitudeTo;
            case 12:
                return latitudeTo;
            case 13:
                return longitudeFrom;
            case 14:
                return latitudeFrom;
            case 15:
                return departureDelay;
            case 16:
                return arrivalDelay;
            case 17:
                return distanceInMeters;
            case 18:
                return flightNumber;
            case 19:
                return airlineCode;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                flightSymbol = (java.lang.CharSequence) value$;
                break;
            case 1:
                airline = (java.lang.CharSequence) value$;
                break;
            case 2:
                flightType = (pl.edu.pwr.raven.flightproducer.avro.FlightType) value$;
                break;
            case 3:
                scheduledDeparture = (java.lang.CharSequence) value$;
                break;
            case 4:
                departure = (java.lang.CharSequence) value$;
                break;
            case 5:
                scheduledArrival = (java.lang.CharSequence) value$;
                break;
            case 6:
                arrival = (java.lang.CharSequence) value$;
                break;
            case 7:
                flightStatus = (pl.edu.pwr.raven.flightproducer.avro.FlightStatus) value$;
                break;
            case 8:
                justification = (java.lang.CharSequence) value$;
                break;
            case 9:
                airportFrom = (java.lang.CharSequence) value$;
                break;
            case 10:
                airportTo = (java.lang.CharSequence) value$;
                break;
            case 11:
                longitudeTo = (java.lang.Double) value$;
                break;
            case 12:
                latitudeTo = (java.lang.Double) value$;
                break;
            case 13:
                longitudeFrom = (java.lang.Double) value$;
                break;
            case 14:
                latitudeFrom = (java.lang.Double) value$;
                break;
            case 15:
                departureDelay = (java.lang.Integer) value$;
                break;
            case 16:
                arrivalDelay = (java.lang.Integer) value$;
                break;
            case 17:
                distanceInMeters = (java.lang.Double) value$;
                break;
            case 18:
                flightNumber = (java.lang.Integer) value$;
                break;
            case 19:
                airlineCode = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'flightSymbol' field.
     *
     * @return Symbol of flight
     */
    public java.lang.CharSequence getFlightSymbol() {
        return flightSymbol;
    }

    /**
     * Sets the value of the 'flightSymbol' field.
     * Symbol of flight
     *
     * @param value the value to set.
     */
    public void setFlightSymbol(java.lang.CharSequence value) {
        this.flightSymbol = value;
    }

    /**
     * Gets the value of the 'airline' field.
     *
     * @return Name of airline
     */
    public java.lang.CharSequence getAirline() {
        return airline;
    }

    /**
     * Sets the value of the 'airline' field.
     * Name of airline
     *
     * @param value the value to set.
     */
    public void setAirline(java.lang.CharSequence value) {
        this.airline = value;
    }

    /**
     * Gets the value of the 'flightType' field.
     *
     * @return The value of the 'flightType' field.
     */
    public pl.edu.pwr.raven.flightproducer.avro.FlightType getFlightType() {
        return flightType;
    }

    /**
     * Sets the value of the 'flightType' field.
     *
     * @param value the value to set.
     */
    public void setFlightType(pl.edu.pwr.raven.flightproducer.avro.FlightType value) {
        this.flightType = value;
    }

    /**
     * Gets the value of the 'scheduledDeparture' field.
     *
     * @return Date and time for a scheduled flight departure
     */
    public java.lang.CharSequence getScheduledDeparture() {
        return scheduledDeparture;
    }

    /**
     * Sets the value of the 'scheduledDeparture' field.
     * Date and time for a scheduled flight departure
     *
     * @param value the value to set.
     */
    public void setScheduledDeparture(java.lang.CharSequence value) {
        this.scheduledDeparture = value;
    }

    /**
     * Gets the value of the 'departure' field.
     *
     * @return Date and time for a flight departure
     */
    public java.lang.CharSequence getDeparture() {
        return departure;
    }

    /**
     * Sets the value of the 'departure' field.
     * Date and time for a flight departure
     *
     * @param value the value to set.
     */
    public void setDeparture(java.lang.CharSequence value) {
        this.departure = value;
    }

    /**
     * Gets the value of the 'scheduledArrival' field.
     *
     * @return Date and time for a scheduled flight arrival
     */
    public java.lang.CharSequence getScheduledArrival() {
        return scheduledArrival;
    }

    /**
     * Sets the value of the 'scheduledArrival' field.
     * Date and time for a scheduled flight arrival
     *
     * @param value the value to set.
     */
    public void setScheduledArrival(java.lang.CharSequence value) {
        this.scheduledArrival = value;
    }

    /**
     * Gets the value of the 'arrival' field.
     *
     * @return Date and time for a flight arrival
     */
    public java.lang.CharSequence getArrival() {
        return arrival;
    }

    /**
     * Sets the value of the 'arrival' field.
     * Date and time for a flight arrival
     *
     * @param value the value to set.
     */
    public void setArrival(java.lang.CharSequence value) {
        this.arrival = value;
    }

    /**
     * Gets the value of the 'flightStatus' field.
     *
     * @return The value of the 'flightStatus' field.
     */
    public pl.edu.pwr.raven.flightproducer.avro.FlightStatus getFlightStatus() {
        return flightStatus;
    }

    /**
     * Sets the value of the 'flightStatus' field.
     *
     * @param value the value to set.
     */
    public void setFlightStatus(pl.edu.pwr.raven.flightproducer.avro.FlightStatus value) {
        this.flightStatus = value;
    }

    /**
     * Gets the value of the 'justification' field.
     *
     * @return Justification code
     */
    public java.lang.CharSequence getJustification() {
        return justification;
    }

    /**
     * Sets the value of the 'justification' field.
     * Justification code
     *
     * @param value the value to set.
     */
    public void setJustification(java.lang.CharSequence value) {
        this.justification = value;
    }

    /**
     * Gets the value of the 'airportFrom' field.
     *
     * @return Airport of departure
     */
    public java.lang.CharSequence getAirportFrom() {
        return airportFrom;
    }

    /**
     * Sets the value of the 'airportFrom' field.
     * Airport of departure
     *
     * @param value the value to set.
     */
    public void setAirportFrom(java.lang.CharSequence value) {
        this.airportFrom = value;
    }

    /**
     * Gets the value of the 'airportTo' field.
     *
     * @return Airport of arrival
     */
    public java.lang.CharSequence getAirportTo() {
        return airportTo;
    }

    /**
     * Sets the value of the 'airportTo' field.
     * Airport of arrival
     *
     * @param value the value to set.
     */
    public void setAirportTo(java.lang.CharSequence value) {
        this.airportTo = value;
    }

    /**
     * Gets the value of the 'longitudeTo' field.
     *
     * @return Longitude coordinate of destination point
     */
    public double getLongitudeTo() {
        return longitudeTo;
    }

    /**
     * Sets the value of the 'longitudeTo' field.
     * Longitude coordinate of destination point
     *
     * @param value the value to set.
     */
    public void setLongitudeTo(double value) {
        this.longitudeTo = value;
    }

    /**
     * Gets the value of the 'latitudeTo' field.
     *
     * @return Latitude coordinate of destination point
     */
    public double getLatitudeTo() {
        return latitudeTo;
    }

    /**
     * Sets the value of the 'latitudeTo' field.
     * Latitude coordinate of destination point
     *
     * @param value the value to set.
     */
    public void setLatitudeTo(double value) {
        this.latitudeTo = value;
    }

    /**
     * Gets the value of the 'longitudeFrom' field.
     *
     * @return Longitude coordinate of origin point
     */
    public double getLongitudeFrom() {
        return longitudeFrom;
    }

    /**
     * Sets the value of the 'longitudeFrom' field.
     * Longitude coordinate of origin point
     *
     * @param value the value to set.
     */
    public void setLongitudeFrom(double value) {
        this.longitudeFrom = value;
    }

    /**
     * Gets the value of the 'latitudeFrom' field.
     *
     * @return Latitude coordinate of origin point
     */
    public double getLatitudeFrom() {
        return latitudeFrom;
    }

    /**
     * Sets the value of the 'latitudeFrom' field.
     * Latitude coordinate of origin point
     *
     * @param value the value to set.
     */
    public void setLatitudeFrom(double value) {
        this.latitudeFrom = value;
    }

    /**
     * Gets the value of the 'departureDelay' field.
     *
     * @return Departure delay in minutes
     */
    public int getDepartureDelay() {
        return departureDelay;
    }

    /**
     * Sets the value of the 'departureDelay' field.
     * Departure delay in minutes
     *
     * @param value the value to set.
     */
    public void setDepartureDelay(int value) {
        this.departureDelay = value;
    }

    /**
     * Gets the value of the 'arrivalDelay' field.
     *
     * @return Arrival delay in minutes
     */
    public int getArrivalDelay() {
        return arrivalDelay;
    }

    /**
     * Sets the value of the 'arrivalDelay' field.
     * Arrival delay in minutes
     *
     * @param value the value to set.
     */
    public void setArrivalDelay(int value) {
        this.arrivalDelay = value;
    }

    /**
     * Gets the value of the 'distanceInMeters' field.
     *
     * @return Distance travelled by an airplane in meters
     */
    public double getDistanceInMeters() {
        return distanceInMeters;
    }

    /**
     * Sets the value of the 'distanceInMeters' field.
     * Distance travelled by an airplane in meters
     *
     * @param value the value to set.
     */
    public void setDistanceInMeters(double value) {
        this.distanceInMeters = value;
    }

    /**
     * Gets the value of the 'flightNumber' field.
     *
     * @return Flight number (second part of flight symbol)
     */
    public int getFlightNumber() {
        return flightNumber;
    }

    /**
     * Sets the value of the 'flightNumber' field.
     * Flight number (second part of flight symbol)
     *
     * @param value the value to set.
     */
    public void setFlightNumber(int value) {
        this.flightNumber = value;
    }

    /**
     * Gets the value of the 'airlineCode' field.
     *
     * @return Airline code (first part of flight symbol)
     */
    public java.lang.CharSequence getAirlineCode() {
        return airlineCode;
    }

    /**
     * Sets the value of the 'airlineCode' field.
     * Airline code (first part of flight symbol)
     *
     * @param value the value to set.
     */
    public void setAirlineCode(java.lang.CharSequence value) {
        this.airlineCode = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.flightSymbol);

        out.writeString(this.airline);

        out.writeEnum(this.flightType.ordinal());

        out.writeString(this.scheduledDeparture);

        out.writeString(this.departure);

        out.writeString(this.scheduledArrival);

        out.writeString(this.arrival);

        out.writeEnum(this.flightStatus.ordinal());

        out.writeString(this.justification);

        out.writeString(this.airportFrom);

        out.writeString(this.airportTo);

        out.writeDouble(this.longitudeTo);

        out.writeDouble(this.latitudeTo);

        out.writeDouble(this.longitudeFrom);

        out.writeDouble(this.latitudeFrom);

        out.writeInt(this.departureDelay);

        out.writeInt(this.arrivalDelay);

        out.writeDouble(this.distanceInMeters);

        out.writeInt(this.flightNumber);

        out.writeString(this.airlineCode);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.flightSymbol = in.readString(this.flightSymbol instanceof Utf8 ? (Utf8) this.flightSymbol : null);

            this.airline = in.readString(this.airline instanceof Utf8 ? (Utf8) this.airline : null);

            this.flightType = pl.edu.pwr.raven.flightproducer.avro.FlightType.values()[in.readEnum()];

            this.scheduledDeparture = in.readString(this.scheduledDeparture instanceof Utf8 ? (Utf8) this.scheduledDeparture : null);

            this.departure = in.readString(this.departure instanceof Utf8 ? (Utf8) this.departure : null);

            this.scheduledArrival = in.readString(this.scheduledArrival instanceof Utf8 ? (Utf8) this.scheduledArrival : null);

            this.arrival = in.readString(this.arrival instanceof Utf8 ? (Utf8) this.arrival : null);

            this.flightStatus = pl.edu.pwr.raven.flightproducer.avro.FlightStatus.values()[in.readEnum()];

            this.justification = in.readString(this.justification instanceof Utf8 ? (Utf8) this.justification : null);

            this.airportFrom = in.readString(this.airportFrom instanceof Utf8 ? (Utf8) this.airportFrom : null);

            this.airportTo = in.readString(this.airportTo instanceof Utf8 ? (Utf8) this.airportTo : null);

            this.longitudeTo = in.readDouble();

            this.latitudeTo = in.readDouble();

            this.longitudeFrom = in.readDouble();

            this.latitudeFrom = in.readDouble();

            this.departureDelay = in.readInt();

            this.arrivalDelay = in.readInt();

            this.distanceInMeters = in.readDouble();

            this.flightNumber = in.readInt();

            this.airlineCode = in.readString(this.airlineCode instanceof Utf8 ? (Utf8) this.airlineCode : null);

        } else {
            for (int i = 0; i < 20; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.flightSymbol = in.readString(this.flightSymbol instanceof Utf8 ? (Utf8) this.flightSymbol : null);
                        break;

                    case 1:
                        this.airline = in.readString(this.airline instanceof Utf8 ? (Utf8) this.airline : null);
                        break;

                    case 2:
                        this.flightType = pl.edu.pwr.raven.flightproducer.avro.FlightType.values()[in.readEnum()];
                        break;

                    case 3:
                        this.scheduledDeparture = in.readString(this.scheduledDeparture instanceof Utf8 ? (Utf8) this.scheduledDeparture : null);
                        break;

                    case 4:
                        this.departure = in.readString(this.departure instanceof Utf8 ? (Utf8) this.departure : null);
                        break;

                    case 5:
                        this.scheduledArrival = in.readString(this.scheduledArrival instanceof Utf8 ? (Utf8) this.scheduledArrival : null);
                        break;

                    case 6:
                        this.arrival = in.readString(this.arrival instanceof Utf8 ? (Utf8) this.arrival : null);
                        break;

                    case 7:
                        this.flightStatus = pl.edu.pwr.raven.flightproducer.avro.FlightStatus.values()[in.readEnum()];
                        break;

                    case 8:
                        this.justification = in.readString(this.justification instanceof Utf8 ? (Utf8) this.justification : null);
                        break;

                    case 9:
                        this.airportFrom = in.readString(this.airportFrom instanceof Utf8 ? (Utf8) this.airportFrom : null);
                        break;

                    case 10:
                        this.airportTo = in.readString(this.airportTo instanceof Utf8 ? (Utf8) this.airportTo : null);
                        break;

                    case 11:
                        this.longitudeTo = in.readDouble();
                        break;

                    case 12:
                        this.latitudeTo = in.readDouble();
                        break;

                    case 13:
                        this.longitudeFrom = in.readDouble();
                        break;

                    case 14:
                        this.latitudeFrom = in.readDouble();
                        break;

                    case 15:
                        this.departureDelay = in.readInt();
                        break;

                    case 16:
                        this.arrivalDelay = in.readInt();
                        break;

                    case 17:
                        this.distanceInMeters = in.readDouble();
                        break;

                    case 18:
                        this.flightNumber = in.readInt();
                        break;

                    case 19:
                        this.airlineCode = in.readString(this.airlineCode instanceof Utf8 ? (Utf8) this.airlineCode : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for Flight instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Flight>
            implements org.apache.avro.data.RecordBuilder<Flight> {

        /**
         * Symbol of flight
         */
        private java.lang.CharSequence flightSymbol;
        /**
         * Name of airline
         */
        private java.lang.CharSequence airline;
        private pl.edu.pwr.raven.flightproducer.avro.FlightType flightType;
        /**
         * Date and time for a scheduled flight departure
         */
        private java.lang.CharSequence scheduledDeparture;
        /**
         * Date and time for a flight departure
         */
        private java.lang.CharSequence departure;
        /**
         * Date and time for a scheduled flight arrival
         */
        private java.lang.CharSequence scheduledArrival;
        /**
         * Date and time for a flight arrival
         */
        private java.lang.CharSequence arrival;
        private pl.edu.pwr.raven.flightproducer.avro.FlightStatus flightStatus;
        /**
         * Justification code
         */
        private java.lang.CharSequence justification;
        /**
         * Airport of departure
         */
        private java.lang.CharSequence airportFrom;
        /**
         * Airport of arrival
         */
        private java.lang.CharSequence airportTo;
        /**
         * Longitude coordinate of destination point
         */
        private double longitudeTo;
        /**
         * Latitude coordinate of destination point
         */
        private double latitudeTo;
        /**
         * Longitude coordinate of origin point
         */
        private double longitudeFrom;
        /**
         * Latitude coordinate of origin point
         */
        private double latitudeFrom;
        /**
         * Departure delay in minutes
         */
        private int departureDelay;
        /**
         * Arrival delay in minutes
         */
        private int arrivalDelay;
        /**
         * Distance travelled by an airplane in meters
         */
        private double distanceInMeters;
        /**
         * Flight number (second part of flight symbol)
         */
        private int flightNumber;
        /**
         * Airline code (first part of flight symbol)
         */
        private java.lang.CharSequence airlineCode;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(pl.edu.pwr.raven.flightproducer.avro.Flight.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.flightSymbol)) {
                this.flightSymbol = data().deepCopy(fields()[0].schema(), other.flightSymbol);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.airline)) {
                this.airline = data().deepCopy(fields()[1].schema(), other.airline);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.flightType)) {
                this.flightType = data().deepCopy(fields()[2].schema(), other.flightType);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.scheduledDeparture)) {
                this.scheduledDeparture = data().deepCopy(fields()[3].schema(), other.scheduledDeparture);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.departure)) {
                this.departure = data().deepCopy(fields()[4].schema(), other.departure);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.scheduledArrival)) {
                this.scheduledArrival = data().deepCopy(fields()[5].schema(), other.scheduledArrival);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.arrival)) {
                this.arrival = data().deepCopy(fields()[6].schema(), other.arrival);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.flightStatus)) {
                this.flightStatus = data().deepCopy(fields()[7].schema(), other.flightStatus);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.justification)) {
                this.justification = data().deepCopy(fields()[8].schema(), other.justification);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.airportFrom)) {
                this.airportFrom = data().deepCopy(fields()[9].schema(), other.airportFrom);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.airportTo)) {
                this.airportTo = data().deepCopy(fields()[10].schema(), other.airportTo);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.longitudeTo)) {
                this.longitudeTo = data().deepCopy(fields()[11].schema(), other.longitudeTo);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.latitudeTo)) {
                this.latitudeTo = data().deepCopy(fields()[12].schema(), other.latitudeTo);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.longitudeFrom)) {
                this.longitudeFrom = data().deepCopy(fields()[13].schema(), other.longitudeFrom);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.latitudeFrom)) {
                this.latitudeFrom = data().deepCopy(fields()[14].schema(), other.latitudeFrom);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
            if (isValidValue(fields()[15], other.departureDelay)) {
                this.departureDelay = data().deepCopy(fields()[15].schema(), other.departureDelay);
                fieldSetFlags()[15] = other.fieldSetFlags()[15];
            }
            if (isValidValue(fields()[16], other.arrivalDelay)) {
                this.arrivalDelay = data().deepCopy(fields()[16].schema(), other.arrivalDelay);
                fieldSetFlags()[16] = other.fieldSetFlags()[16];
            }
            if (isValidValue(fields()[17], other.distanceInMeters)) {
                this.distanceInMeters = data().deepCopy(fields()[17].schema(), other.distanceInMeters);
                fieldSetFlags()[17] = other.fieldSetFlags()[17];
            }
            if (isValidValue(fields()[18], other.flightNumber)) {
                this.flightNumber = data().deepCopy(fields()[18].schema(), other.flightNumber);
                fieldSetFlags()[18] = other.fieldSetFlags()[18];
            }
            if (isValidValue(fields()[19], other.airlineCode)) {
                this.airlineCode = data().deepCopy(fields()[19].schema(), other.airlineCode);
                fieldSetFlags()[19] = other.fieldSetFlags()[19];
            }
        }

        /**
         * Creates a Builder by copying an existing Flight instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(pl.edu.pwr.raven.flightproducer.avro.Flight other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.flightSymbol)) {
                this.flightSymbol = data().deepCopy(fields()[0].schema(), other.flightSymbol);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.airline)) {
                this.airline = data().deepCopy(fields()[1].schema(), other.airline);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.flightType)) {
                this.flightType = data().deepCopy(fields()[2].schema(), other.flightType);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.scheduledDeparture)) {
                this.scheduledDeparture = data().deepCopy(fields()[3].schema(), other.scheduledDeparture);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.departure)) {
                this.departure = data().deepCopy(fields()[4].schema(), other.departure);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.scheduledArrival)) {
                this.scheduledArrival = data().deepCopy(fields()[5].schema(), other.scheduledArrival);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.arrival)) {
                this.arrival = data().deepCopy(fields()[6].schema(), other.arrival);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.flightStatus)) {
                this.flightStatus = data().deepCopy(fields()[7].schema(), other.flightStatus);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.justification)) {
                this.justification = data().deepCopy(fields()[8].schema(), other.justification);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.airportFrom)) {
                this.airportFrom = data().deepCopy(fields()[9].schema(), other.airportFrom);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.airportTo)) {
                this.airportTo = data().deepCopy(fields()[10].schema(), other.airportTo);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.longitudeTo)) {
                this.longitudeTo = data().deepCopy(fields()[11].schema(), other.longitudeTo);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.latitudeTo)) {
                this.latitudeTo = data().deepCopy(fields()[12].schema(), other.latitudeTo);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.longitudeFrom)) {
                this.longitudeFrom = data().deepCopy(fields()[13].schema(), other.longitudeFrom);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.latitudeFrom)) {
                this.latitudeFrom = data().deepCopy(fields()[14].schema(), other.latitudeFrom);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.departureDelay)) {
                this.departureDelay = data().deepCopy(fields()[15].schema(), other.departureDelay);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.arrivalDelay)) {
                this.arrivalDelay = data().deepCopy(fields()[16].schema(), other.arrivalDelay);
                fieldSetFlags()[16] = true;
            }
            if (isValidValue(fields()[17], other.distanceInMeters)) {
                this.distanceInMeters = data().deepCopy(fields()[17].schema(), other.distanceInMeters);
                fieldSetFlags()[17] = true;
            }
            if (isValidValue(fields()[18], other.flightNumber)) {
                this.flightNumber = data().deepCopy(fields()[18].schema(), other.flightNumber);
                fieldSetFlags()[18] = true;
            }
            if (isValidValue(fields()[19], other.airlineCode)) {
                this.airlineCode = data().deepCopy(fields()[19].schema(), other.airlineCode);
                fieldSetFlags()[19] = true;
            }
        }

        /**
         * Gets the value of the 'flightSymbol' field.
         * Symbol of flight
         *
         * @return The value.
         */
        public java.lang.CharSequence getFlightSymbol() {
            return flightSymbol;
        }


        /**
         * Sets the value of the 'flightSymbol' field.
         * Symbol of flight
         *
         * @param value The value of 'flightSymbol'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setFlightSymbol(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.flightSymbol = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'flightSymbol' field has been set.
         * Symbol of flight
         *
         * @return True if the 'flightSymbol' field has been set, false otherwise.
         */
        public boolean hasFlightSymbol() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'flightSymbol' field.
         * Symbol of flight
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearFlightSymbol() {
            flightSymbol = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'airline' field.
         * Name of airline
         *
         * @return The value.
         */
        public java.lang.CharSequence getAirline() {
            return airline;
        }


        /**
         * Sets the value of the 'airline' field.
         * Name of airline
         *
         * @param value The value of 'airline'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setAirline(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.airline = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'airline' field has been set.
         * Name of airline
         *
         * @return True if the 'airline' field has been set, false otherwise.
         */
        public boolean hasAirline() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'airline' field.
         * Name of airline
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearAirline() {
            airline = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'flightType' field.
         *
         * @return The value.
         */
        public pl.edu.pwr.raven.flightproducer.avro.FlightType getFlightType() {
            return flightType;
        }


        /**
         * Sets the value of the 'flightType' field.
         *
         * @param value The value of 'flightType'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setFlightType(pl.edu.pwr.raven.flightproducer.avro.FlightType value) {
            validate(fields()[2], value);
            this.flightType = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'flightType' field has been set.
         *
         * @return True if the 'flightType' field has been set, false otherwise.
         */
        public boolean hasFlightType() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'flightType' field.
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearFlightType() {
            flightType = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'scheduledDeparture' field.
         * Date and time for a scheduled flight departure
         *
         * @return The value.
         */
        public java.lang.CharSequence getScheduledDeparture() {
            return scheduledDeparture;
        }


        /**
         * Sets the value of the 'scheduledDeparture' field.
         * Date and time for a scheduled flight departure
         *
         * @param value The value of 'scheduledDeparture'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setScheduledDeparture(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.scheduledDeparture = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'scheduledDeparture' field has been set.
         * Date and time for a scheduled flight departure
         *
         * @return True if the 'scheduledDeparture' field has been set, false otherwise.
         */
        public boolean hasScheduledDeparture() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'scheduledDeparture' field.
         * Date and time for a scheduled flight departure
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearScheduledDeparture() {
            scheduledDeparture = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'departure' field.
         * Date and time for a flight departure
         *
         * @return The value.
         */
        public java.lang.CharSequence getDeparture() {
            return departure;
        }


        /**
         * Sets the value of the 'departure' field.
         * Date and time for a flight departure
         *
         * @param value The value of 'departure'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setDeparture(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.departure = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'departure' field has been set.
         * Date and time for a flight departure
         *
         * @return True if the 'departure' field has been set, false otherwise.
         */
        public boolean hasDeparture() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'departure' field.
         * Date and time for a flight departure
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearDeparture() {
            departure = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'scheduledArrival' field.
         * Date and time for a scheduled flight arrival
         *
         * @return The value.
         */
        public java.lang.CharSequence getScheduledArrival() {
            return scheduledArrival;
        }


        /**
         * Sets the value of the 'scheduledArrival' field.
         * Date and time for a scheduled flight arrival
         *
         * @param value The value of 'scheduledArrival'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setScheduledArrival(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.scheduledArrival = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'scheduledArrival' field has been set.
         * Date and time for a scheduled flight arrival
         *
         * @return True if the 'scheduledArrival' field has been set, false otherwise.
         */
        public boolean hasScheduledArrival() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'scheduledArrival' field.
         * Date and time for a scheduled flight arrival
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearScheduledArrival() {
            scheduledArrival = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'arrival' field.
         * Date and time for a flight arrival
         *
         * @return The value.
         */
        public java.lang.CharSequence getArrival() {
            return arrival;
        }


        /**
         * Sets the value of the 'arrival' field.
         * Date and time for a flight arrival
         *
         * @param value The value of 'arrival'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setArrival(java.lang.CharSequence value) {
            validate(fields()[6], value);
            this.arrival = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'arrival' field has been set.
         * Date and time for a flight arrival
         *
         * @return True if the 'arrival' field has been set, false otherwise.
         */
        public boolean hasArrival() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'arrival' field.
         * Date and time for a flight arrival
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearArrival() {
            arrival = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'flightStatus' field.
         *
         * @return The value.
         */
        public pl.edu.pwr.raven.flightproducer.avro.FlightStatus getFlightStatus() {
            return flightStatus;
        }


        /**
         * Sets the value of the 'flightStatus' field.
         *
         * @param value The value of 'flightStatus'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setFlightStatus(pl.edu.pwr.raven.flightproducer.avro.FlightStatus value) {
            validate(fields()[7], value);
            this.flightStatus = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'flightStatus' field has been set.
         *
         * @return True if the 'flightStatus' field has been set, false otherwise.
         */
        public boolean hasFlightStatus() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'flightStatus' field.
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearFlightStatus() {
            flightStatus = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'justification' field.
         * Justification code
         *
         * @return The value.
         */
        public java.lang.CharSequence getJustification() {
            return justification;
        }


        /**
         * Sets the value of the 'justification' field.
         * Justification code
         *
         * @param value The value of 'justification'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setJustification(java.lang.CharSequence value) {
            validate(fields()[8], value);
            this.justification = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'justification' field has been set.
         * Justification code
         *
         * @return True if the 'justification' field has been set, false otherwise.
         */
        public boolean hasJustification() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'justification' field.
         * Justification code
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearJustification() {
            justification = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'airportFrom' field.
         * Airport of departure
         *
         * @return The value.
         */
        public java.lang.CharSequence getAirportFrom() {
            return airportFrom;
        }


        /**
         * Sets the value of the 'airportFrom' field.
         * Airport of departure
         *
         * @param value The value of 'airportFrom'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setAirportFrom(java.lang.CharSequence value) {
            validate(fields()[9], value);
            this.airportFrom = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'airportFrom' field has been set.
         * Airport of departure
         *
         * @return True if the 'airportFrom' field has been set, false otherwise.
         */
        public boolean hasAirportFrom() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'airportFrom' field.
         * Airport of departure
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearAirportFrom() {
            airportFrom = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'airportTo' field.
         * Airport of arrival
         *
         * @return The value.
         */
        public java.lang.CharSequence getAirportTo() {
            return airportTo;
        }


        /**
         * Sets the value of the 'airportTo' field.
         * Airport of arrival
         *
         * @param value The value of 'airportTo'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setAirportTo(java.lang.CharSequence value) {
            validate(fields()[10], value);
            this.airportTo = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'airportTo' field has been set.
         * Airport of arrival
         *
         * @return True if the 'airportTo' field has been set, false otherwise.
         */
        public boolean hasAirportTo() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'airportTo' field.
         * Airport of arrival
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearAirportTo() {
            airportTo = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'longitudeTo' field.
         * Longitude coordinate of destination point
         *
         * @return The value.
         */
        public double getLongitudeTo() {
            return longitudeTo;
        }


        /**
         * Sets the value of the 'longitudeTo' field.
         * Longitude coordinate of destination point
         *
         * @param value The value of 'longitudeTo'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setLongitudeTo(double value) {
            validate(fields()[11], value);
            this.longitudeTo = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'longitudeTo' field has been set.
         * Longitude coordinate of destination point
         *
         * @return True if the 'longitudeTo' field has been set, false otherwise.
         */
        public boolean hasLongitudeTo() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'longitudeTo' field.
         * Longitude coordinate of destination point
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearLongitudeTo() {
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'latitudeTo' field.
         * Latitude coordinate of destination point
         *
         * @return The value.
         */
        public double getLatitudeTo() {
            return latitudeTo;
        }


        /**
         * Sets the value of the 'latitudeTo' field.
         * Latitude coordinate of destination point
         *
         * @param value The value of 'latitudeTo'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setLatitudeTo(double value) {
            validate(fields()[12], value);
            this.latitudeTo = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'latitudeTo' field has been set.
         * Latitude coordinate of destination point
         *
         * @return True if the 'latitudeTo' field has been set, false otherwise.
         */
        public boolean hasLatitudeTo() {
            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'latitudeTo' field.
         * Latitude coordinate of destination point
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearLatitudeTo() {
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'longitudeFrom' field.
         * Longitude coordinate of origin point
         *
         * @return The value.
         */
        public double getLongitudeFrom() {
            return longitudeFrom;
        }


        /**
         * Sets the value of the 'longitudeFrom' field.
         * Longitude coordinate of origin point
         *
         * @param value The value of 'longitudeFrom'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setLongitudeFrom(double value) {
            validate(fields()[13], value);
            this.longitudeFrom = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'longitudeFrom' field has been set.
         * Longitude coordinate of origin point
         *
         * @return True if the 'longitudeFrom' field has been set, false otherwise.
         */
        public boolean hasLongitudeFrom() {
            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'longitudeFrom' field.
         * Longitude coordinate of origin point
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearLongitudeFrom() {
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'latitudeFrom' field.
         * Latitude coordinate of origin point
         *
         * @return The value.
         */
        public double getLatitudeFrom() {
            return latitudeFrom;
        }


        /**
         * Sets the value of the 'latitudeFrom' field.
         * Latitude coordinate of origin point
         *
         * @param value The value of 'latitudeFrom'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setLatitudeFrom(double value) {
            validate(fields()[14], value);
            this.latitudeFrom = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'latitudeFrom' field has been set.
         * Latitude coordinate of origin point
         *
         * @return True if the 'latitudeFrom' field has been set, false otherwise.
         */
        public boolean hasLatitudeFrom() {
            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'latitudeFrom' field.
         * Latitude coordinate of origin point
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearLatitudeFrom() {
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'departureDelay' field.
         * Departure delay in minutes
         *
         * @return The value.
         */
        public int getDepartureDelay() {
            return departureDelay;
        }


        /**
         * Sets the value of the 'departureDelay' field.
         * Departure delay in minutes
         *
         * @param value The value of 'departureDelay'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setDepartureDelay(int value) {
            validate(fields()[15], value);
            this.departureDelay = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'departureDelay' field has been set.
         * Departure delay in minutes
         *
         * @return True if the 'departureDelay' field has been set, false otherwise.
         */
        public boolean hasDepartureDelay() {
            return fieldSetFlags()[15];
        }


        /**
         * Clears the value of the 'departureDelay' field.
         * Departure delay in minutes
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearDepartureDelay() {
            fieldSetFlags()[15] = false;
            return this;
        }

        /**
         * Gets the value of the 'arrivalDelay' field.
         * Arrival delay in minutes
         *
         * @return The value.
         */
        public int getArrivalDelay() {
            return arrivalDelay;
        }


        /**
         * Sets the value of the 'arrivalDelay' field.
         * Arrival delay in minutes
         *
         * @param value The value of 'arrivalDelay'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setArrivalDelay(int value) {
            validate(fields()[16], value);
            this.arrivalDelay = value;
            fieldSetFlags()[16] = true;
            return this;
        }

        /**
         * Checks whether the 'arrivalDelay' field has been set.
         * Arrival delay in minutes
         *
         * @return True if the 'arrivalDelay' field has been set, false otherwise.
         */
        public boolean hasArrivalDelay() {
            return fieldSetFlags()[16];
        }


        /**
         * Clears the value of the 'arrivalDelay' field.
         * Arrival delay in minutes
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearArrivalDelay() {
            fieldSetFlags()[16] = false;
            return this;
        }

        /**
         * Gets the value of the 'distanceInMeters' field.
         * Distance travelled by an airplane in meters
         *
         * @return The value.
         */
        public double getDistanceInMeters() {
            return distanceInMeters;
        }


        /**
         * Sets the value of the 'distanceInMeters' field.
         * Distance travelled by an airplane in meters
         *
         * @param value The value of 'distanceInMeters'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setDistanceInMeters(double value) {
            validate(fields()[17], value);
            this.distanceInMeters = value;
            fieldSetFlags()[17] = true;
            return this;
        }

        /**
         * Checks whether the 'distanceInMeters' field has been set.
         * Distance travelled by an airplane in meters
         *
         * @return True if the 'distanceInMeters' field has been set, false otherwise.
         */
        public boolean hasDistanceInMeters() {
            return fieldSetFlags()[17];
        }


        /**
         * Clears the value of the 'distanceInMeters' field.
         * Distance travelled by an airplane in meters
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearDistanceInMeters() {
            fieldSetFlags()[17] = false;
            return this;
        }

        /**
         * Gets the value of the 'flightNumber' field.
         * Flight number (second part of flight symbol)
         *
         * @return The value.
         */
        public int getFlightNumber() {
            return flightNumber;
        }


        /**
         * Sets the value of the 'flightNumber' field.
         * Flight number (second part of flight symbol)
         *
         * @param value The value of 'flightNumber'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setFlightNumber(int value) {
            validate(fields()[18], value);
            this.flightNumber = value;
            fieldSetFlags()[18] = true;
            return this;
        }

        /**
         * Checks whether the 'flightNumber' field has been set.
         * Flight number (second part of flight symbol)
         *
         * @return True if the 'flightNumber' field has been set, false otherwise.
         */
        public boolean hasFlightNumber() {
            return fieldSetFlags()[18];
        }


        /**
         * Clears the value of the 'flightNumber' field.
         * Flight number (second part of flight symbol)
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearFlightNumber() {
            fieldSetFlags()[18] = false;
            return this;
        }

        /**
         * Gets the value of the 'airlineCode' field.
         * Airline code (first part of flight symbol)
         *
         * @return The value.
         */
        public java.lang.CharSequence getAirlineCode() {
            return airlineCode;
        }


        /**
         * Sets the value of the 'airlineCode' field.
         * Airline code (first part of flight symbol)
         *
         * @param value The value of 'airlineCode'.
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder setAirlineCode(java.lang.CharSequence value) {
            validate(fields()[19], value);
            this.airlineCode = value;
            fieldSetFlags()[19] = true;
            return this;
        }

        /**
         * Checks whether the 'airlineCode' field has been set.
         * Airline code (first part of flight symbol)
         *
         * @return True if the 'airlineCode' field has been set, false otherwise.
         */
        public boolean hasAirlineCode() {
            return fieldSetFlags()[19];
        }


        /**
         * Clears the value of the 'airlineCode' field.
         * Airline code (first part of flight symbol)
         *
         * @return This builder.
         */
        public pl.edu.pwr.raven.flightproducer.avro.Flight.Builder clearAirlineCode() {
            airlineCode = null;
            fieldSetFlags()[19] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Flight build() {
            try {
                Flight record = new Flight();
                record.flightSymbol = fieldSetFlags()[0] ? this.flightSymbol : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.airline = fieldSetFlags()[1] ? this.airline : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.flightType = fieldSetFlags()[2] ? this.flightType : (pl.edu.pwr.raven.flightproducer.avro.FlightType) defaultValue(fields()[2]);
                record.scheduledDeparture = fieldSetFlags()[3] ? this.scheduledDeparture : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.departure = fieldSetFlags()[4] ? this.departure : (java.lang.CharSequence) defaultValue(fields()[4]);
                record.scheduledArrival = fieldSetFlags()[5] ? this.scheduledArrival : (java.lang.CharSequence) defaultValue(fields()[5]);
                record.arrival = fieldSetFlags()[6] ? this.arrival : (java.lang.CharSequence) defaultValue(fields()[6]);
                record.flightStatus = fieldSetFlags()[7] ? this.flightStatus : (pl.edu.pwr.raven.flightproducer.avro.FlightStatus) defaultValue(fields()[7]);
                record.justification = fieldSetFlags()[8] ? this.justification : (java.lang.CharSequence) defaultValue(fields()[8]);
                record.airportFrom = fieldSetFlags()[9] ? this.airportFrom : (java.lang.CharSequence) defaultValue(fields()[9]);
                record.airportTo = fieldSetFlags()[10] ? this.airportTo : (java.lang.CharSequence) defaultValue(fields()[10]);
                record.longitudeTo = fieldSetFlags()[11] ? this.longitudeTo : (java.lang.Double) defaultValue(fields()[11]);
                record.latitudeTo = fieldSetFlags()[12] ? this.latitudeTo : (java.lang.Double) defaultValue(fields()[12]);
                record.longitudeFrom = fieldSetFlags()[13] ? this.longitudeFrom : (java.lang.Double) defaultValue(fields()[13]);
                record.latitudeFrom = fieldSetFlags()[14] ? this.latitudeFrom : (java.lang.Double) defaultValue(fields()[14]);
                record.departureDelay = fieldSetFlags()[15] ? this.departureDelay : (java.lang.Integer) defaultValue(fields()[15]);
                record.arrivalDelay = fieldSetFlags()[16] ? this.arrivalDelay : (java.lang.Integer) defaultValue(fields()[16]);
                record.distanceInMeters = fieldSetFlags()[17] ? this.distanceInMeters : (java.lang.Double) defaultValue(fields()[17]);
                record.flightNumber = fieldSetFlags()[18] ? this.flightNumber : (java.lang.Integer) defaultValue(fields()[18]);
                record.airlineCode = fieldSetFlags()[19] ? this.airlineCode : (java.lang.CharSequence) defaultValue(fields()[19]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










